7E0080	16 bytes	REPLAY menu drawing code uses this as scratch ram more or less

7E0090	4? bytes	holds source address for BG DMA uploads, also used to store addrs for indirect jumps

7E0200	1 byte		NMI thingy (set when NMI runs, breaks loop)
7E0201	1 byte		if bit 7 set, quit NMI completely. if bit 6 also set, update 4200/2100 then quit
			if bit 4 set, dont update score/time during gameplay (maybe this is pause flag?)

7E0202	2 bytes?	high bit determines if youve selected an item on the title screen

7E0204	2 bytes?	high bit determines if youre on title screen or in level? (set=level?)

7E0208	8 bytes		game title in Shift-JIS [8A 43 95 A0 90 EC 94 77] (海腹川背)

7E0210	2 bytes		layer 1 X mirror
7E0212	2 bytes		layer 1 Y mirror

7E021C	1 byte		HDMA channel enable (420C mirror)

7E0220	2 bytes		something with the line GFX. if zero, wont update (maybe length of line?)
7E0222	2 bytes		if line goes up/down, this stores to above, and more line drawn

7E0226	2 bytes		sort of index for Kawase GFX to use. if high bit set, dont update. if FFFF, upl from RAM?
7E0228	2 bytes		sort of index for Kawase's arm GFX to use. if high bit set, dont update
7E022A	2 bytes		sort of index for fishing lure GFX to use. if high bit set, dont update
7E022C	2 bytes		sort of index for fishing hook GFX to use. if high bit set, dont update

7E0236	2 bytes		OAM addr for obj priority

7E0238	2 bytes		palette index to upload to (low byte). if high byte negative, no palette update
7E023A	2 bytes		number of colors to update

7E023E	2 bytes		possibly RNG output

7E0240	2 bytes		joypad port 1 data [byetUDLRaxlr000-]. bit 0 = joypad connected (0=no, 1=yes)
7E0242	2 bytes		joypad port 2 data [byetUDLRaxlr000-]. bit 0 = joypad connected (0=no, 1=yes)
7E0244	2 bytes		joypad port 1 pressed (aka 1 frame)
7E0246	2 bytes		joypad port 2 pressed (aka 1 frame)
7E0248	2 bytes		inverse of joypad port 1 data
7E024A	2 bytes		inverse of joypad port 2 data
7E024C	2 bytes		copy of joypad port 1 data
7E024E	2 bytes		copy of joypad port 2 data

7E0250	2 bytes		16bit frame counter. resets on blackscreens

7E025B	1 byte		might be tileset?

7E0270	2 bytes		title screen cursor position (0,1,2)
7E0272	2 bytes		title screen timer (until it plays demo)
7E0274	2 bytes		how many times youve pressed select on the title screen (for the 5min thingy)

7E0280	until 02F0	VRAM DMA buffer. 2 byte length, 2 byte vramaddr, 3 byte srcaddr. so 7 bytes each
			if length is 0000, end of buffer
7E02F0	2 bytes		??? maybe empty
7E02F2	2 bytes		index to 0280

7E0300	x20 bytes	tiles for high score (xC), score (xC), and time (x8) counters

7E0B80	x13 bytes	HDMA table (212C, 1 reg write once) [ch6]
7E0B93	x5 bytes	maybe empty, or extension for above

7E0B98	x15 bytes	HDMA table (2111-2112, 2 regs write twice each) [ch7]
7E0BAD	x3 bytes	maybe empty, or extension for above

7E0BB0	2 bytes		???

7E0BC0	1 byte		brightness mirror, for water? (used in IRQ only)
7E0BC2	2 bytes		current animation frame for water (high byte; low byte is clear)
7E0BC4	2 bytes		timer for water animation? (low byte; high byte is clear). basically added to above
7E0BC6	2 bytes		frames of animation for water (high byte; low byte is clear). 4 for calm, 6 for wave

7E0BC8	2 bytes		???

7E1000	??? bytes	GFX for fishing line uploaded here (since theyre dynamic)

7E1900	2 bytes		command for spc process. 1=sfx, 2=samples?, 3=music?, 4=misc data? (high byte clear)
7E1902	2 bytes		value for above (basically holds sfx/song #, among other things)
7E1908	1 byte		set to 1 if monaural, cleared if stereo
7E190A	2 bytes		copy of 7E1900? (at least temporarily)
7E190C	2 bytes		???
7E190E	3 bytes		holds address for indirect addressing
7E1911	3 bytes		prolly same
7E1914	3 bytes		same?
7E1917	3 bytes		same jesus stick to a single pointer lol
7E191A	1 byte		???
7E191C	1 byte		???
7E1960	2 bytes		holds some ARAM address?
7E19A0	10 bytes	???
7E19C0	20 bytes	some table (10 words)
7E19E0	20 bytes	copy of above?
7E1A01	1 byte		bit 6 determines stereo/monaural output? set = monaural

7E1BE0	x200 bytes	OAM mirror
7E1DE0	x20 bytes	OAM high table

7E1E00	x40 bytes	stack 1
7E1E40	x40 bytes	stack 2
7E1E80	x40 bytes	stack 3
7E1EC0	x40 bytes	stack 4
7E1F00	x2 bytes	stack 1 pointer
7E1F02	x2 bytes	stack 2 pointer
7E1F04	x2 bytes	stack 3 pointer
7E1F06	x2 bytes	stack 4 pointer
7E1F10	x2 bytes	index to 1F00
7E1F12	x2 bytes	backup of stack pointer
7E1F14	until 1FFF	stack 0

7E5200	x200 bytes	CGRAM mirror
7E5400	x200 bytes	CGRAM mirror mirror, but also REPLAY tilemap buffer. i guess its multi-use
7E5600	16 bytes	more or less scratch RAM for the REPLAY menu